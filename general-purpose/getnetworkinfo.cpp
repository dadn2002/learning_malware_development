#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>       // For time-related functions
#include <conio.h>      // For _kbhit() and _getch() functions
#include <windows.h>    // For Sleep function

// Function to ping the specified IP address and return the result and time delay
int pingIP(const char *ipAddress, double *timeDelay) {
    char pingCommand[128];
    snprintf(pingCommand, sizeof(pingCommand), "ping -n 1 %s", ipAddress);

    // Execute the ping command and capture its output
    FILE *pingOutput = _popen(pingCommand, "r");
    if (pingOutput == NULL) {
        perror("Error executing ping command");
        return -1;
    }

    // Measure the time before executing the ping command
    clock_t startTime = clock();

    // Check if ping was successful
    int pingResult = -1;
    char pingResponse[256];
    while (fgets(pingResponse, sizeof(pingResponse), pingOutput) != NULL) {
        if (strstr(pingResponse, "Reply from") != NULL) {
            pingResult = 0; // Ping successful
            break;
        }
    }

    // Measure the time after executing the ping command
    clock_t endTime = clock();

    // Calculate the time delay
    *timeDelay = (double)(endTime - startTime) / CLOCKS_PER_SEC * 1000; // Convert to milliseconds

    // Close the ping command output
    _pclose(pingOutput);

    return pingResult;
}

int main() {
    char arpCommand[] = "arp -a"; // Command to execute
    char buffer[1024];            // Buffer to store command output

    // Loop until Enter key is pressed
    while (1) {  // !_kbhit()
        system("cls");
        // Execute the ARP command and capture its output
        FILE *arpOutput = _popen(arpCommand, "r");
        if (arpOutput == NULL) {
            perror("Error executing ARP command");
            return 1;
        }

        // Read ARP command output line by line and process it
        while (fgets(buffer, sizeof(buffer), arpOutput) != NULL) {
            // Process each line of ARP command output
            // Example: extract ARP entries, print, etc.
            printf("%s", buffer);

            // Extract IP address and type from the ARP table entry
            char *token = strtok(buffer, " ");
            char ipAddress[16]; // Maximum IP address length
            char type[8];       // Maximum type length
            while (token != NULL) {
                if (strstr(token, ".") != NULL) {
                    strncpy(ipAddress, token, sizeof(ipAddress));
                } else if (strstr(token, "dynamic") != NULL || strstr(token, "static") != NULL) {
                    strncpy(type, token, sizeof(type));
                }
                token = strtok(NULL, " ");
            }

            // Ping the IP address if it's dynamic and display the result
            if (strcmp(type, "dynamic") == 0) {
                double timeDelay = 0;
                int pingResult = pingIP(ipAddress, &timeDelay);
                if (pingResult == 0) {
                    printf("  Ping: Success (Time Delay: %.2f ms)\n", timeDelay);
                } else {
                    printf("  Ping: Failed\n");
                }
            }
        }

        // Close the ARP command output
        _pclose(arpOutput);

        // Display timestamp
        time_t now = time(NULL);
        printf("Timestamp: %s", asctime(localtime(&now)));

        // Wait for 30 seconds
        Sleep(10000);
    }

    // Exit if Enter key is pressed
    _getch(); // Consume the Enter key press
    return 0;
}
