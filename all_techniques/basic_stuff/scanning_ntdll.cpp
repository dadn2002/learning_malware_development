#include <iostream>
#include <windows.h>
#include <dbghelp.h>

#pragma comment(lib, "dbghelp.lib")

void PrintExportedFunctions(const char* dllName) {
    HMODULE hModule = LoadLibraryA(dllName);
    if (hModule == NULL) {
        std::cerr << "Failed to load DLL: " << GetLastError() << std::endl;
        return;
    }

    uintptr_t baseAddress = reinterpret_cast<uintptr_t>(hModule);

    IMAGE_DOS_HEADER* dosHeader = reinterpret_cast<IMAGE_DOS_HEADER*>(baseAddress);
    if (dosHeader->e_magic != IMAGE_DOS_SIGNATURE) {
        std::cerr << "Invalid DOS header" << std::endl;
        FreeLibrary(hModule);
        return;
    }

    IMAGE_NT_HEADERS* ntHeaders = reinterpret_cast<IMAGE_NT_HEADERS*>(baseAddress + dosHeader->e_lfanew);
    if (ntHeaders->Signature != IMAGE_NT_SIGNATURE) {
        std::cerr << "Invalid NT header" << std::endl;
        FreeLibrary(hModule);
        return;
    }

    IMAGE_DATA_DIRECTORY exportDirectory = ntHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT];
    if (exportDirectory.VirtualAddress == 0) {
        std::cerr << "No export table found" << std::endl;
        FreeLibrary(hModule);
        return;
    }

    IMAGE_EXPORT_DIRECTORY* exportTable = reinterpret_cast<IMAGE_EXPORT_DIRECTORY*>(baseAddress + exportDirectory.VirtualAddress);

    DWORD* functionNames = reinterpret_cast<DWORD*>(baseAddress + exportTable->AddressOfNames);
    DWORD* functionAddresses = reinterpret_cast<DWORD*>(baseAddress + exportTable->AddressOfFunctions);
    WORD* nameOrdinals = reinterpret_cast<WORD*>(baseAddress + exportTable->AddressOfNameOrdinals);

    for (DWORD i = 0; i < exportTable->NumberOfNames; ++i) {
        const char* functionName = reinterpret_cast<const char*>(baseAddress + functionNames[i]);
        DWORD functionAddress = baseAddress + functionAddresses[nameOrdinals[i]];
        printf("Function: %s, Address: 0x%08lX\n", functionName, functionAddress);
    }

    FreeLibrary(hModule);
}

int main() {
    const char* dllName = "C:\\Windows\\System32\\ntdll.dll";
    PrintExportedFunctions(dllName);
    return 0;
}
