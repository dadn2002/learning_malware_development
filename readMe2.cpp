
/*  Information GetLastError() 
    Note that GetLastError() reads the same value as NtCurrentTeb() 
    The register acessed is GS:[30h] on x64 or FS:[60h] on x84
    TEB means Thread Environment Block
    struct _TEB * NtCurrentTeb(VOID) defined at line 420 in psfunchs.h as:
        {
            #if defined (_M_IX86)
                return (PTEB)__readfsdword(0x18);   
                // return a pointer to the dword fs register offset by 18
            #elif defined (_M_AMD64)
                return (struct _TEB *)__readgsqword(FIELD_OFFSET(NT_TIB, Self));
                // return ? to the qword gs register offset by __
            #elif defined (_M_ARM)
                return (struct _TEB *)KeGetPcr()->Used_Self;
                // ?
            #endif
        }
    Its important to define TEB to:
        // THESE STRUCTURES CHANGE FREQUENTLY
        typedef struct _TEB{
            PVOID Reserved1[12];
            PPEB  ProcessEnviromentBlock;
            PVOID Reserved2[399];
            BYTE  Reserved3[1952];
            PVOID TlsSlots[64];
            BYTE  Reserved4[8];
            PVOID Reserved5[26];
            PVOID ReservedForOle;
            PVOID Reserved6[4];
            PVOID TlsExpansionSlots;
        } TEB, *PTEB;
*/

/*  Information IsDebuggerPresent()

    NtCurrentTeb() reads a register of PEB.
    PEB means Program Environment Block
    PEB
        #if defined (_M_IX86)
            return (PPEB)__readfsdword(0x30);
        #elif defined (_M_AMD64)
            return (PPEB)__readgsqword(0x60);
        #elif defined (_M_ARM)
            return (PPEB)(*(PULONG_PTR)((ULONG_PTR)KeGetPcr() + 0x18));
            // For ARM architecture, the PEB is located at offset 0x18 from the PCR
        #endif

    typedef struct _PEB {
    BYTE                          Reserved1[2];
    BYTE                          BeingDebugged;
    BYTE                          Reserved2[1];
    PVOID                         Reserved3[2];
    PPEB_LDR_DATA                 Ldr;
    PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;
    PVOID                         Reserved4[3];
    PVOID                         AtlThunkSListPtr;
    PVOID                         Reserved5;
    ULONG                         Reserved6;
    PVOID                         Reserved7;
    ULONG                         Reserved8;
    ULONG                         AtlThunkSListPtr32;
    PVOID                         Reserved9[45];
    BYTE                          Reserved10[96];
    PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;
    BYTE                          Reserved11[128];
    PVOID                         Reserved12[1];
    ULONG                         SessionId;
    } PEB, *PPEB;
*/